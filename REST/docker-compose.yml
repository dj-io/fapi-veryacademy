version: "3.8" # version of code to utilize in this file

# what is docker?
# creates a container with an individual os that can run all dependencies and software needed for our application, making the application machine independent, any cpu that can run docker can run our app

services: # identify what we want docker to run
  db: # service name
    container_name: ${DB_CONTAINER_NAME}
    image: postgres # downloads an image (this can be thought of as a install disk, each container type will need a image type)
    restart: always # if the container fails or closes down it will automatically run the container again
    ports: # the only way to access what is in our container we must set a port (works as usually sevrver ports do):
      - 5432:5432 # map/forward the port on our cpu to a open port on our container
    environment: # this calls to environment variables (contain all sensitive data)
    - POSTGRES_USER=${DB_USER}
    - POSTGRES_PASSWORD=${DB_PASSWORD}
    - POSTGRES_DB=${DB_NAME}

  pgadmin: # service name - pgadmin allows us to view work with and make changes to our db within our container
    container_name: pgadmin
    image: dpage/pgadmin4
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_EMAIL}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_PASSWORD}
    ports:
      - 5050:80
    depends_on: # says this container should be created/run after the service named below, in this case db
      - db

  app: # app service name
    container_name: ${APP_CONTAINER_NAME} #naming the container
    build: . # where to build the app from
    command: bash -c "alembic upgrade && uvicorn main:app --host 0.0.0.0 --port 8000 --reload" # checks for any new migrations/runs app on container
    volumes:
      - .:/app # ensuring our local code is included in our container app and viceversa (mirroring container to developer folder)
    ports:
      - 8000:8000 # map/forward the port from our machine to the container
    depends_on:
      - db
    restart: always


